package topics


import java.text.SimpleDateFormat
import java.util.*
import kotlin.concurrent.timer
import kotlin.system.measureNanoTime
import kotlin.time.Duration
import kotlin.time.measureTimedValue

fun main(){
    // Данный два массива [1, 2, 3, 2, 0] и [5, 1, 2, 7, 3, 2]
    // Надо вернуть [1, 2, 2, 3] (порядок не важен)

    val inputArray1 = listOf(1,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,5)
    val inputArray2 = mutableListOf(5,1,2,7,3,2,1,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,5)

    val a1 = intArrayOf(1,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,5)

    val a2 = intArrayOf(5,1,2,7,3,2,1,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,51,2,3,2,0,4,7,4,5,6,8,0,8,7,6,5,5,4,3,2,2,2,3,4,4,5,6,76,7,8,75,7,8,7,5,5,4,4,5)



    val sdf = SimpleDateFormat("ssSSS")

    println(System.currentTimeMillis().toString())
    var currentDate1 = sdf.format(Date())
    println(ArrayCompare(inputArray1,inputArray2))
    var currentDate2 = sdf.format(Date())
    println(currentDate1)
    println(currentDate2)
    println(currentDate2.toInt()-currentDate1.toInt())
    println(System.currentTimeMillis().toString())

    println("----")

    var currentDate3 = sdf.format(Date())
    println(getRepieatedIntersection(a1, a2))
    var currentDate4 = sdf.format(Date())
    println(currentDate3)
    println(currentDate4)
    println(currentDate4.toInt()-currentDate3.toInt())
}

fun ArrayCompare (array1: List<Int>, array2: MutableList<Int>): List<Int> {
    var result = mutableListOf<Int>()

    array1.forEach{
        if (it in array2) {
            result.add(it)
            array2.remove(it)
        }
    }

    return result.sorted()
}

fun getRepieatedIntersection(a1: IntArray, a2: IntArray ): List<Int>{
    val s1 = a1.toHashSet()
    val s2 = a2.toHashSet()

    val result = mutableListOf<Int>()

    for (el in s1){
        if (s2.contains(el)){
            val numOfRepits = minOf(a1.count {it == el}, a2.count {it == el} )
            repeat(numOfRepits) {result.add(el)}
        }
    }

    println(s1.toString())
    println(s2.toString())

    return result
}